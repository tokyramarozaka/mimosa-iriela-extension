package mock_logic.validation_model.norms;

import aStar_planning.pop_with_norms.components.DeonticOperator;
import aStar_planning.pop_with_norms.components.Norm;
import aStar_planning.pop_with_norms.components.NormConditions;
import aStar_planning.pop_with_norms.components.NormConsequences;
import aStar_planning.pop_with_norms.components.NormativeAction;
import aStar_planning.pop_with_norms.components.RegulativeNorm;
import mock_logic.validation_model.Zones;

import java.util.ArrayList;
import java.util.List;

public class NormsForExploitationFarmer {
    public static List<Norm> getAll() {
        return new ArrayList<>(List.of(
                farmerInSacredZoneCannotCut(),
                farmerInScaredZoneCannotFish(),
                farmerWithLicenseInProtectedZoneMayFish(),
                farmerWithLicenseInProtectedZoneMayCut()
        ));
    }

    private static Norm farmerInSacredZoneCannotCut() {
        return new RegulativeNorm(DeonticOperator.PROHIBITION,inSacredZone(),cutConsequence());
    }
    private static Norm farmerInScaredZoneCannotFish() {
        return new RegulativeNorm(DeonticOperator.PROHIBITION,inSacredZone(),fishConsequence());
    }
    private static Norm farmerWithLicenseInProtectedZoneMayCut() {
        return new RegulativeNorm(DeonticOperator.PERMISSION,inProtectedZoneWithLicense(),
                cutConsequence());
    }
    public static Norm farmerWithLicenseInProtectedZoneMayFish() {
        return new RegulativeNorm(DeonticOperator.PERMISSION,inProtectedZoneWithLicense(),
                fishConsequence()
        );
    }

    private static NormConditions inSacredZone() {
        return new NormConditions(List.of(
                AtomFactory.inZone(Zones.Z1),
                AtomFactory.isSacred(Zones.Z1)
        ));
    }

    private static NormConditions inProtectedZone() {
        return new NormConditions(List.of(
                AtomFactory.inZone(Zones.Z1),
                AtomFactory.isProtected(Zones.Z1)
        ));
    }

    private static NormConsequences cutConsequence() {
        return new NormativeAction(ActionFactory.cut());
    }

    private static NormConditions inProtectedZoneWithLicense() {
        return new NormConditions(List.of(
                AtomFactory.inZone(Zones.Z1),
                AtomFactory.isProtected(Zones.Z1),
                AtomFactory.haveLicense()
        ));
    }

    private static NormConsequences fishConsequence() {
        return new NormativeAction(ActionFactory.fish());
    }

}
